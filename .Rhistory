bsrdm <- getGTExDataset(gtex.folder,tissues,protein.coding)
bsrdm <- learnParameters(bsrdm, quick=TRUE, null.model="normal", plot.folder="/home/jcolinge/bulk-paper/tmp")
data(sdc,package="BulkSignalR")
normal <- grep("^N", names(sdc))
bsrdm <- prepareDataset(sdc[, -normal])
bsrdm <- learnParameters(bsrdm, quick=TRUE, plot.folder="/home/jcolinge/bulk-paper/tmp")
bsrdm <- learnParameters(bsrdm, quick=TRUE, plot.folder="/home/jcolinge/bulk-paper/tmp")
chip <- read.csv("GPL570-55999.txt",sep="\t",stringsAsFactors=FALSE,comment.char="#")
setwd("~/bulk-paper")
chip <- read.csv("GPL570-55999.txt",sep="\t",stringsAsFactors=FALSE,comment.char="#")
affy.symbols <- sapply(strsplit(chip$Gene.Symbol," /// "),function(x)x[1])
affy2symb <- setNames(affy.symbols,chip$ID)
marray <- read.csv("GSE21050_series_matrix.txt",sep="\t",stringsAsFactors=FALSE,comment.char="!")
mapped.symb <- affy2symb[marray$ID_REF]
bad <- is.na(mapped.symb) | nchar(mapped.symb)==0
marray <- marray[!bad,]
mapped.symb <- affy2symb[marray$ID_REF]
counts <- marray
counts$ID_REF <- mapped.symb
bsrdm <- prepareDataset(counts,symbol.col=1)
bsrdm <- learnParameters(bsrdm,quick=TRUE,plot.folder="tmp")
library(BulkSignalR)
bsrdm <- learnParameters(bsrdm,quick=TRUE,plot.folder="tmp")
bsrdm <- learnParameters(bsrdm,quick=TRUE,plot.folder="tmp",verbose=TRUE)
str(param(bsrdm))
model1 <- bsrdm
bsrdm <- learnParameters(bsrdm,quick=TRUE,null.model="mixedNormal",plot.folder="tmp")
str(param(bsrdm))
bsrdm <- learnParameters(bsrdm,quick=TRUE,null.model="kernelEmpirical",plot.folder="tmp")
setwd("~/BulkSignalR")
library(BulkSignalR)
bsrdm <- learnParameters(bsrdm,quick=TRUE,null.model="kernelEmpirical",plot.folder="tmp")
setwd("../bulk-paper/")
bsrdm <- learnParameters(bsrdm,quick=TRUE,null.model="kernelEmpirical",plot.folder="tmp")
str(param(bsrdm))
bsrdm <- learnParameters(bsrdm,quick=TRUE,null.model="empirical",plot.folder="tmp")
library(BulkSignalR)
bsrdm <- learnParameters(bsrdm,quick=TRUE,null.model="kernelEmpirical",plot.folder="tmp")
library(BulkSignalR)
library(foreach)
library(doMC)
library(multtest)
n.proc <- 8
n.proc <- 4
registerDoMC(n.proc)
chip <- read.csv("GPL570-55999.txt",sep="\t",stringsAsFactors=FALSE,comment.char="#")
affy.symbols <- sapply(strsplit(chip$Gene.Symbol," /// "),function(x)x[1])
affy2symb <- setNames(affy.symbols,chip$ID)
marray <- read.csv("GSE21050_series_matrix.txt",sep="\t",stringsAsFactors=FALSE,comment.char="!")
mapped.symb <- affy2symb[marray$ID_REF]
bad <- is.na(mapped.symb) | nchar(mapped.symb)==0
marray <- marray[!bad,]
mapped.symb <- affy2symb[marray$ID_REF]
counts <- marray
setwd("~/bulk-paper")
chip <- read.csv("GPL570-55999.txt",sep="\t",stringsAsFactors=FALSE,comment.char="#")
affy.symbols <- sapply(strsplit(chip$Gene.Symbol," /// "),function(x)x[1])
affy2symb <- setNames(affy.symbols,chip$ID)
marray <- read.csv("GSE21050_series_matrix.txt",sep="\t",stringsAsFactors=FALSE,comment.char="!")
mapped.symb <- affy2symb[marray$ID_REF]
bad <- is.na(mapped.symb) | nchar(mapped.symb)==0
marray <- marray[!bad,]
mapped.symb <- affy2symb[marray$ID_REF]
counts <- marray
counts$ID_REF <- mapped.symb
bsrdm <- prepareDataset(counts,symbol.col=1)
bsrdm <- learnParameters(bsrdm,quick=TRUE,null.model="automatic",plot.folder="tmp")
library(BulkSignalR)
bsrdm <- learnParameters(bsrdm,quick=TRUE,null.model="automatic",plot.folder="tmp",verbose=T)
library(BulkSignalR)
bsrdm <- learnParameters(bsrdm,quick=TRUE,null.model="automatic",plot.folder="tmp",verbose=T)
str(param(bsrdm))
library(BulkSignalR)
bsrdm <- learnParameters(bsrdm,quick=TRUE,null.model="automatic",plot.folder="tmp",verbose=T)
sqrt(0.000843624)
sqrt(0.00029991)
sqrt(8.070381e-05)
library(BulkSignalR)
bsrdm <- learnParameters(bsrdm,quick=TRUE,null.model="automatic",plot.folder="tmp",verbose=T)
data(sdc,package="BulkSignalR")
normal <- grep("^N", names(sdc))
bsrdm <- prepareDataset(sdc[, -normal])
bsrdm <- learnParameters(bsrdm,quick=TRUE,null.model="automatic",plot.folder="tmp",verbose=T)
sqrt(0.0002928163)
sqrt(0.0002928167)
sqrt(0.000230894)
counts <- fread("~/databases/TCGA/mRNA-annotated/TCGA-BRCA-counts-annotated.txt",data.table=FALSE)
counts <- counts[counts$type=="protein_coding",]
counts <- counts[,-c(1,3,4,5)]
sample.types <- substr(names(counts)[-(1:5)],14,15)
table(sample.types)
counts <- counts[,c(TRUE,sample.types!="11")]
counts <- counts[!is.na(counts[[1]]),]
counts[1:10,1:5]
bsrdm <- prepareDataset(counts,symbol.col=1)
library(data.table)
counts <- fread("~/databases/TCGA/mRNA-annotated/TCGA-BRCA-counts-annotated.txt",data.table=FALSE)
counts <- counts[counts$type=="protein_coding",]
counts <- counts[,-c(1,3,4,5)]
sample.types <- substr(names(counts)[-(1:5)],14,15)
table(sample.types)
counts <- counts[,c(TRUE,sample.types!="11")]
counts <- counts[!is.na(counts[[1]]),]
counts[1:10,1:5]
bsrdm <- prepareDataset(counts,symbol.col=1)
bsrdm <- learnParameters(bsrdm,quick=TRUE,null.model="automatic",plot.folder="tmp",verbose=T)
sqrt(0.000281602)
sqrt(0.0002160099)
sqrt(0.0002320203)
tcga <- fread("~/databases/TCGA/mRNA-annotated/TCGA-ACC-counts-annotated.txt",data.table=FALSE)
gtex.folder <- "~/databases/GTEx/"
protein.coding <- tcga$symbol[tcga$type=="protein_coding"]
tissues <- setNames(c("Brain - Frontal Cortex (BA9)"),c("fr.cortex"))
getGTExDataset <- function(folder,tissues,protein.coding=NULL,method=c("UQ","TC")){
method <- match.arg(method)
if (is.null(protein.coding))
stop("Protein coding Ensembl IDs must be provided")
# Load data
gt <- fread(paste0(folder,"GTEx_Analysis_2017-06-05_v8_RNASeQCv1.1.9_gene_reads.gct"),data.table=FALSE,skip=2,showProgress=FALSE)
sp <- fread(paste0(folder,"GTEx_Analysis_v8_Annotations_SampleAttributesDS.txt"),data.table=FALSE)
symbols <- gt$Description
good.g <- gt$Description %in% protein.coding
good.sp <- names(gt) %in% sp$SAMPID[sp$SMTSD%in%tissues]
gt <- gt[good.g,good.sp]
symbols <- symbols[good.g]
prepareDataset(cbind(symbols,gt),symbol.col=1,method=method)
} # getGTExDataset
bsrdm <- getGTExDataset(gtex.folder,tissues,protein.coding)
bsrdm <- learnParameters(bsrdm,quick=TRUE,null.model="automatic",plot.folder="tmp",verbose=T)
sqrt(0.0008149272)
sqrt(0.0008149273)
sqrt(0.000430491)
counts <- read.csv("bench1_count.tsv",sep="\t",stringsAsFactors=FALSE)
areas <- read.csv("bench1_label.tsv",sep="\t",stringsAsFactors=FALSE)
areas$idSpatial <- paste0("X",areas$idSpatial)
bsrdm <- prepareDataset(bcounts,symbol.col=1,min.count=1.5)
bsrdm <- prepareDataset(counts,symbol.col=1,min.count=1.5)
bsrdm <- learnParameters(bsrdm,quick=TRUE,null.model="automatic",plot.folder="tmp",verbose=T)
sqrt(0.006456787)
sqrt(0.002774482)
sqrt(0.0008283884)
counts <- read.csv("bench2_count.tsv",sep="\t",stringsAsFactors=FALSE)
areas <- read.csv("bench2_label.tsv",sep="\t",stringsAsFactors=FALSE)
areas$idSpatial <- paste0("X",areas$idSpatial)
areas <- areas[areas$idSpatial %in% names(counts),]
areas$label <- areas$ground_truth
areas$label[is.na(areas$label)] <- "unclassified"
table(areas$label)
counts.1 <- data.matrix(counts[,-1])
rownames(counts.1) <- counts[[1]]
good <- rowSums(counts.1>0)>0.1*ncol(counts.1)
counts.1 <- counts.1[good,]
dim(counts.1)
q <- apply(counts.1,2,function(x) quantile(x[x>0],0.75))
# q <- colSums(counts.1)
sum(q==0)
counts.2 <- counts.1[,q>0]
q <- q[q>0]
areas.2 <- areas[areas$idSpatial %in% colnames(counts.2),]
counts.2 <- sweep(counts.2,2,q/median(q),"/")
lcounts.2 <- log10(1+counts.2)
lcounts.2 <- counts.2
LRdb <- SingleCellSignalR::LRdb
mu <- mean(lcounts.2)
LRdb <- LRdb[LRdb$ligand%in%rownames(lcounts.2) & LRdb$receptor%in%rownames(lcounts.2),]
u <- unique(areas.2$label)
cols <- setNames(rainbow(length(u)),u)
bsrdm <- prepareDataset(counts,symbol.col=1,min.count=1)
bsrdm <- learnParameters(bsrdm,quick=TRUE,null.model="automatic",plot.folder="tmp",verbose=T)
sqrt(0.0173929)
sqrt(0.001965413)
sqrt(0.0004872584)
bsrdm <- learnParameters(bsrdm,quick=TRUE,null.model="automatic",plot.folder="tmp",verbose=T)
counts <- read.csv("~/bulk-paper/bench4_count.tsv",sep="\t",stringsAsFactors=FALSE)
bsrdm <- prepareDataset(counts,symbol.col=1,min.count=1,method="TC")
bsrdm <- learnParameters(bsrdm,quick=TRUE,null.model="automatic",plot.folder="tmp",verbose=T)
bsrdm <- learnParameters(bsrdm,quick=TRUE,null.model="mixedNormal",plot.folder="tmp",verbose=T)
params(bsrdm)$Chi2
param(bsrdm)$Chi2
str(param(bsrdm))
sqrt(0.000489)
bsrdm <- learnParameters(bsrdm,quick=TRUE,null.model="kernelEmpirical",plot.folder="tmp",verbose=T)
str(param(bsrdm))
sqrt(0.000113)
log("a")
try(log("a"))
.Last.value
try(log(4))
.Last.value
res <- try(log("a"))
res <- try(log("a"), silent=TRUE)
inherits(res, "try-error")
res <- try(log(2), silent=TRUE)
inherits(res, "try-error")
library(BulkSignalR)
bsrdm <- learnParameters(bsrdm,quick=TRUE,null.model="automatic",plot.folder="tmp",verbose=T)
bsrdm <- learnParameters(bsrdm,quick=TRUE,null.model="automatic",plot.folder="tmp",verbose=T)
library(BulkSignalR)
counts <- fread("~/databases/TCGA/mRNA-annotated/TCGA-BRCA-counts-annotated.txt",data.table=FALSE)
counts <- counts[counts$type=="protein_coding",]
counts <- counts[,-c(1,3,4,5)]
sample.types <- substr(names(counts)[-(1:5)],14,15)
table(sample.types)
counts <- counts[,c(TRUE,sample.types!="11")]
counts <- counts[!is.na(counts[[1]]),]
counts[1:10,1:5]
bsrdm <- prepareDataset(counts,symbol.col=1)
bsrdm <- learnParameters(bsrdm, quick=FALSE, plot.folder="tmp")
library(BulkSignalR)
library(foreach)
library(doMC)
library(viridis)
library(circlize)
n.proc <- 4
registerDoMC(n.proc)
counts <- read.csv("~/bulk-paper/bench4_count.tsv",sep="\t",stringsAsFactors=FALSE)
areas <- read.csv("bench4_label.tsv",sep="\t",stringsAsFactors=FALSE)
areas$idSpatial <- paste0("X",areas$idSpatial)
areas <- areas[areas$idSpatial %in% names(counts),]
areas$label <- areas$Classification
areas$label[nchar(areas$label)==0] <- 'unknown'
setwd("~/bulk-paper")
areas <- read.csv("bench4_label.tsv",sep="\t",stringsAsFactors=FALSE)
areas$idSpatial <- paste0("X",areas$idSpatial)
areas <- areas[areas$idSpatial %in% names(counts),]
areas$label <- areas$Classification
areas$label[nchar(areas$label)==0] <- 'unknown'
load("bench4-bsrdm.rda")
bsrdm
bsrinf <- initialInference(bsrdm, min.cor=0.1)
bsrinf
save(bsrinf,file="bench4-bsrinf-kernelempirical.rda")
source("~/bulk-paper/FDRplots-spatial-4.R")
source("~/bulk-paper/FDRplots-spatial-4.R")
# save(bsrdm,file="bench4-bsrdm.rda")
load("bench4-bsrdm.rda")
bsrinf <- initialInference(bsrdm, min.cor=0.1)
bsrdm
# save(bsrdm,file="bench4-bsrdm.rda")
load("bench4-bsrdm.rda")
bsrdm
# save(bsrinf,file="bench4-bsrinf-kernelempirical.rda")
load("bench4-bsrinf-kernelempirical.rda")
bsrinf
bsrinf <- rescoreInference(bsrinf,param=param(bsrdm),rank.p=0.65)
bsrinf
pairs <- LRinter(bsrinf)
sum(pairs$qval<0.01)
sum(pairs$qval<0.001)
View(pairs)
bsrinf.red <- reduceToBestPathway(bsrinf)
pairs.red <- LRinter(bsrinf.red)
sum(pairs.red$qval<0.05)
sum(pairs.red$qval<0.015)
sum(pairs.red$qval<0.05)
View(pairs.red)
sum(pairs.red$qval<0.1)
sum(pairs.red$qval<0.2)
sum(pairs.red$qval<0.9)
View(pairs)
bsrdm
bsrdm <- learnParameters(bsrdm,quick=FALSE,plot.folder="~/bulk-paper/bench4-test/",min.positive=3,
min.pw.size=500, verbose=TRUE)
bsrdm <- learnParameters(bsrdm,quick=FALSE,plot.folder="~/bulk-paper/bench4-test/",min.positive=3,
max.pw.size=500, verbose=TRUE)
bsrinf <- initialInference(bsrdm, min.cor=0.1)
bsrinf
pairs <- LRinter(bsrinf)
sum(pairs$qval<0.001)
bsrinf.red <- reduceToBestPathway(bsrinf)
pairs.red <- LRinter(bsrinf.red)
sum(pairs.red$qval<0.05)
bsrinf <- rescoreInference(bsrinf,param=param(bsrdm),rank.p=0.65)
bsrinf.red <- reduceToBestPathway(bsrinf)
pairs.red <- LRinter(bsrinf.red)
sum(pairs.red$qval<0.05)
bsrdm <- learnParameters(bsrdm,quick=FALSE,plot.folder="~/bulk-paper/bench4-test/",min.positive=2,
verbose=TRUE)
bsrdm
bsrinf <- initialInference(bsrdm, min.cor=0.1)
bsrinf
pairs <- LRinter(bsrinf)
sum(pairs$qval<0.001)
bsrinf.red <- reduceToBestPathway(bsrinf)
pairs.red <- LRinter(bsrinf.red)
sum(pairs.red$qval<0.05)
bsrinf <- rescoreInference(bsrinf,param=param(bsrdm),rank.p=0.65)
pairs <- LRinter(bsrinf)
sum(pairs$qval<0.001)
bsrinf.red <- reduceToBestPathway(bsrinf)
pairs.red <- LRinter(bsrinf.red)
sum(pairs.red$qval<0.05)
bsrinf <- rescoreInference(bsrinf,param=param(bsrdm),rank.p=0.85)
pairs <- LRinter(bsrinf)
sum(pairs$qval<0.001)
bsrinf.red <- reduceToBestPathway(bsrinf)
pairs.red <- LRinter(bsrinf.red)
sum(pairs.red$qval<0.05)
bsrinf <- rescoreInference(bsrinf,param=param(bsrdm),rank.p=0.65)
pairs <- LRinter(bsrinf)
sum(pairs$qval<0.001)
bsrinf <- rescoreInference(bsrinf,param=param(bsrdm),rank.p=0.55)
pairs <- LRinter(bsrinf)
sum(pairs$qval<0.001)
bsrinf <- rescoreInference(bsrinf,param=param(bsrdm),rank.p=0.7)
pairs <- LRinter(bsrinf)
sum(pairs$qval<0.001)
bsrinf.red <- reduceToBestPathway(bsrinf)
pairs.red <- LRinter(bsrinf.red)
sum(pairs.red$qval<0.05)
bsrinf <- rescoreInference(bsrinf,param=param(bsrdm),rank.p=0.65)
pairs <- LRinter(bsrinf)
sum(pairs$qval<0.001)
P.LR <- 1-pnorm(pairs$LR.corr,mean=bsrdm@param$LR.0$norm$mu,sd=bsrdm@param$LR.0$norm$sigma)
sum(P.LR<0.01)
bsrinf.red <- reduceToBestPathway(bsrinf)
sum(pairs.red$qval<0.05)
bsrinf <- initialInference(bsrdm, min.cor=0.05)
pairs <- LRinter(bsrinf)
sum(pairs$qval<0.001)
bsrinf.red <- reduceToBestPathway(bsrinf)
pairs.red <- LRinter(bsrinf.red)
sum(pairs.red$qval<0.05)
bsrinf <- rescoreInference(bsrinf,param=param(bsrdm),rank.p=0.65)
pairs <- LRinter(bsrinf)
sum(pairs$qval<0.001)
bsrinf.red <- reduceToBestPathway(bsrinf)
pairs.red <- LRinter(bsrinf.red)
sum(pairs.red$qval<0.05)
save(bsrdm,file="bench4-bsrdm.rda")
save(bsrinf,file="bench4-bsrinf-kernelempirical.rda")
u <- unique(areas$label)
cols <- setNames(rainbow(length(u)),u)
plot(x=areas$array_col,y=areas$array_row,col=cols[areas$label],pch=20)
s.red <- getLRGeneSignatures(bsrinf.red,qval.thres=0.05)
scores.red <- scoreLRGeneSignatures(bsrdm,s.red,LR.weight=0.5)
for (i in 1:nrow(scores.red)){
iter <- gsub("\\}","",gsub("\\{","",rownames(scores.red)[i]))
fn <- gsub(" +/ +","-",iter,perl=TRUE)
pdf(paste0("bench4-plots/interaction-plot-",fn),width=5,height=3,useDingbats=F,pointsize=8)
opar <- par(mfrow=c(1,2))
plot(x=areas$array_col,y=areas$array_row,col=cols[areas$label],pch=20,main="Tissue areas",xlab="x",ylab="y")
legend(x="topright",legend=u,pch=19,col=cols[u],cex=0.5,bg=rgb(1.0,1.0,1.0,0.8))
v <- scores.red[i,areas$idSpatial]
hi <- quantile(v,0.975)
lo <- quantile(v,0.025)
v[v<lo] <- lo
v[v>hi] <- hi
colscale <- colorRamp2(breaks=c(min(v),0,max(v)),colors=c("royalblue3","white","orange"))
plot(x=areas$array_col,y=areas$array_row,pch=20,main=iter,xlab="x",ylab="y",col=colscale(v))
par(opar)
dev.off()
}
save(bsrdm,file="bench4-bsrdm-kernelempirical.rda")
save(bsrinf,file="bench4-bsrinf-kernelempirical.rda")
bsrdm <- learnParameters(bsrdm,quick=FALSE,plot.folder="~/bulk-paper/bench4-test/",min.positive=2,
null.model="stable", verbose=TRUE)
bsrdm
library(BulkSignalR)
bsrdm <- prepareDataset(counts,symbol.col=1,min.count=1,method="TC")
bsrdm <- learnParameters(bsrdm,quick=FALSE,plot.folder="~/bulk-paper/bench4-test/",min.positive=2,
null.model="stable", verbose=TRUE)
save(bsrdm,file="bench4-bsrdm-stable.rda")
bsrinf <- initialInference(bsrdm, min.cor=0.05)
save(bsrinf,file="bench4-bsrinf-stable.rda")
bsrinf
pairs <- LRinter(bsrinf)
sum(pairs$qval<0.001)
bsrinf.red <- reduceToBestPathway(bsrinf)
pairs.red <- LRinter(bsrinf.red)
sum(pairs.red$qval<0.05)
bsrinf <- rescoreInference(bsrinf,param=param(bsrdm),rank.p=0.65)
pairs <- LRinter(bsrinf)
sum(pairs$qval<0.001)
bsrinf.red <- reduceToBestPathway(bsrinf)
pairs.red <- LRinter(bsrinf.red)
sum(pairs.red$qval<0.05)
View(areas)
library(BulkSignalR)
library(BulkSignalR)
setwd("~/bulk-paper")
library(foreach)
library(doMC)
library(viridis)
library(circlize)
n.proc <- 4
registerDoMC(n.proc)
counts <- read.csv("bench4_count.tsv",sep="\t",stringsAsFactors=FALSE)
areas <- read.csv("bench4_label.tsv",sep="\t",stringsAsFactors=FALSE)
areas$idSpatial <- paste0("X",areas$idSpatial)
areas <- areas[areas$idSpatial %in% names(counts),]
areas$label <- areas$Classification
areas$label[nchar(areas$label)==0] <- 'unknown'
# save(bsrdm,file="bench4-bsrdm-kernelempirical.rda")
load("bench4-bsrdm-kernelempirical.rda")
# save(bsrinf,file="bench4-bsrinf-kernelempirical.rda")
# save(bsrinf,file="bench4-bsrinf-stable.rda")
load("bench4-bsrinf-kernelempirical.rda")
pairs <- LRinter(bsrinf)
sum(pairs$qval<0.001)
bsrinf.red <- reduceToBestPathway(bsrinf)
pairs.red <- LRinter(bsrinf.red)
sum(pairs.red$qval<0.05)
buildPermutationIndices <- function(ncounts, n.bins = 20) {
rm <-  rowMeans(ncounts, na.rm = TRUE)
breaks <- stats::quantile(rm, prob = (seq(0,n.bins))/n.bins)
breaks[1] <- 0
lapply(seq(2,length(breaks)),
function(i) which(rm>breaks[i-1] & rm<=breaks[i])
)
}  # buildPermutationIndices
shufflePermutationIndices <- function(pind) {
lapply(pind,
function(x) sample(x, length(x))
)
} # shufflePermutationIndices
buildPermutatedCountMatrix <- function(ncounts, pind) {
symbols <- rownames(ncounts)
rind <- shufflePermutationIndices(pind)
for (i in seq_len(length(pind)))
symbols[pind[[i]]] <- symbols[rind[[i]]]
rownames(ncounts) <- symbols
ncounts
}  # buildPermutatedMatrix
cdfKernelEmpirical <- function(x, par){
par$kernelCDF(x)
} # cdfKernelEmpirical
ncounts <- ncounts(bsrdm)
pindices <- buildPermutationIndices(ncounts)
qvalFullSigned <- list()
qvalQuickSigned <- list()
qvalFullSigned.red <- list()
qvalQuickSigned.red <- list()
qvalSigned.LR <- list()
qvalSigned.LR.red <- list()
max.pow <- 10
eps <- 10**(-max.pow)
n.perm <- 25
n.rank.signed <- 7
param <- param(bsrdm)
param.q <- param
param.q$RT.0 <- param$LR.0
# rescore direct inferences (once)
infer <- foreach(rank.p=seq(0.55,0.85,by=0.05),.combine=c) %do% {
list(rescoreInference(bsrinf,param=param,rank.p=rank.p))
}
qinfer <- foreach(rank.p=seq(0.55,0.85,by=0.05),.combine=c) %do% {
list(rescoreInference(bsrinf,param=param.q,rank.p=rank.p))
}
fdr.proc <- "BH"
rncounts <- buildPermutatedCountMatrix(ncounts, pindices)
r.ds <- prepareDataset(rncounts, normalize = FALSE, method = "ALREADY")
# r.ds <- learnParameters(r.ds, quick=FALSE)
r.ds@param <- param
r.inf <- initialInference(r.ds)
dim(corrg)
library(BulkSignalR)
dim(ncounts(r.ds))
rownames(ncounts(r.ds))[1:5]
colnames(ncounts(r.ds))[1:5]
r.inf <- initialInference(r.ds)
bsrinf
bsrdm
bsrinf
r.inf <- initialInference(r.ds, min.cor=param(bsrinf)$min.corr)
r.inf <- initialInference(r.ds, min.cor=infParam(bsrinf)$min.corr)
# signed = TRUE
r.infer <- foreach(rank.p=seq(0.55,0.85,by=0.05),.combine=c) %do% {
list(rescoreInference(r.inf,param=param,rank.p=rank.p))
}
qr.infer <- foreach(rank.p=seq(0.55,0.85,by=0.05),.combine=c) %do% {
list(rescoreInference(r.inf,param=param.q,rank.p=rank.p))
}
for (i in length(infer):1){
i.inf <- infer[[i]]
i.pairs <- LRinter(i.inf)
i.r.inf <- r.infer[[i]]
i.r.pairs <- LRinter(i.r.inf)
qvalFullSigned <- c(qvalFullSigned,list(i.pairs$qval,i.r.pairs$qval))
i.pairs.red <- LRinter(reduceToBestPathway(i.inf))
i.r.pairs.red <- LRinter(reduceToBestPathway(i.r.inf))
qvalFullSigned.red <- c(qvalFullSigned.red,list(i.pairs.red$qval,i.r.pairs.red$qval))
}
for (i in length(infer):1){
i.inf <- qinfer[[i]]
i.pairs <- LRinter(i.inf)
i.r.inf <- qr.infer[[i]]
i.r.pairs <- LRinter(i.r.inf)
qvalQuickSigned <- c(qvalQuickSigned,list(i.pairs$qval,i.r.pairs$qval))
i.pairs.red <- LRinter(reduceToBestPathway(i.inf))
i.r.pairs.red <- LRinter(reduceToBestPathway(i.r.inf))
qvalQuickSigned.red <- c(qvalQuickSigned.red,list(i.pairs.red$qval,i.r.pairs.red$qval))
}
pairs <- LRinter(infer[[1]])
P.LR <- 1-cdfKernelEmpirical(pairs$LR.corr,param$LR.0$model)
adj <- multtest::mt.rawp2adjp(P.LR,fdr.proc)
Q.LR <- adj$adjp[order(adj$index),fdr.proc]
r.pairs <- LRinter(r.infer[[1]])
r.P.LR <- 1-cdfKernelEmpirical(r.pairs$LR.corr,param$LR.0$model)
adj <- multtest::mt.rawp2adjp(r.P.LR,fdr.proc)
r.Q.LR <- adj$adjp[order(adj$index),fdr.proc]
qvalSigned.LR <- c(qvalSigned.LR,list(Q.LR,r.Q.LR))
pairs <- LRinter(reduceToBestPathway(infer[[1]]))
P.LR <- 1-cdfKernelEmpirical(pairs$LR.corr,param$LR.0$model)
adj <- multtest::mt.rawp2adjp(P.LR,fdr.proc)
Q.LR <- adj$adjp[order(adj$index),fdr.proc]
r.pairs <- LRinter(reduceToBestPathway(r.infer[[1]]))
r.P.LR <- 1-cdfKernelEmpirical(r.pairs$LR.corr,param$LR.0$model)
adj <- multtest::mt.rawp2adjp(r.P.LR,fdr.proc)
r.Q.LR <- adj$adjp[order(adj$index),fdr.proc]
qvalSigned.LR.red <- c(qvalSigned.LR.red,list(Q.LR,r.Q.LR))
View(r.pairs)
